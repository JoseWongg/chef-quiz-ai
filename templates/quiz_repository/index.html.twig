{% extends 'layout.html.twig' %}

{% block layout_title %}Quiz Repository{% endblock %}

{% block content %}

    <h2 style="text-align: center; padding-bottom: 1em">Quiz Repository</h2>

    {# Section to display the filters for the quizzes #}
    <div class="container" style="margin-top: 1em; margin-bottom: 4em">
        <div class="row">
            <div class="col-md-4">
                <label for="trainerFilter" >Filter by Trainer:</label>
                <select id="trainerFilter" class="form-select">
                    <option value="">All</option>
                    {% for user in users %}

                        {#if the user has the role trainer add its name to the dropdown list #}
                        {% if 'ROLE_TRAINER' in user.roles %}
                            <option value="{{ user.name }}">{{ user.name }}</option>
                        {% endif %}
                    {% endfor %}
                </select>
            </div>



            <div class="col-md-4">
                <label for="topicFilter">Filter by Topic:</label>
                <select id="topicFilter" class="form-select">
                    <option value="">All</option>
                    {% for topic in topics %}
                        <option value="{{ topic }}">{{ topic }}</option>
                    {% endfor %}
                </select>
            </div>


            <div class="col-md-4">
                <label for="userFilter">Filter by Chef:</label>
                <select id="userFilter" class="form-select">
                    <option value="">All Users</option>
                    {% for user in users %}
                        <option value="{{ user.id }}">{{ user.name }}</option>
                    {% endfor %}
                </select>
            </div>

        </div>
    </div>





    {# Section to display the quizzes #}

    <div style="min-height: 800px;">
    <table class="table" >
        <thead>
        <tr>
            <th style="text-align: center" >Date Created</th>
            <th style="text-align: center">Quiz ID</th>
            <th style="text-align: center">Topic</th>
            <th style="text-align: center">Trainer Name</th>
              <th style="text-align: center"></th>
        </tr>
        </thead>
        <tbody id="quizList">

        {# if there isn't any quiz, display a message #}
        {% if quizzes|length == 0 %}
        <tr>
            <td colspan="9" style="text-align: center">
                <div class="alert alert-warning" role="alert">
                    There are no Quizzes!
                </div>
            </td>
        </tr>
        {% else %}


        {% for quiz in quizzes %}
            <tr>
                <td style="text-align: center">{{ quiz.creationDate|date('d-m-Y') }}</td>
                <td style="text-align: center">{{ quiz.id }}</td>
                <td style="text-align: center">{{ quiz.type }}</td>
                <td style="text-align: center">{{ quiz.trainer.name }}</td>
                <td style="text-align: center">
                    <a href="{{ path('app_quiz_details', {'id': quiz.id}) }}" class="btn btn-primary">Details</a>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignModal" data-quiz-id="{{ quiz.id }}" data-questions="{{ quiz.questions|length }}">Assign</button>
                    <a href="{{ path('app_quiz_history', {'id': quiz.id}) }}" class="btn btn-primary">History</a>
                </td>
            </tr>
        {% endfor %}
        {% endif %}
        </tbody>
    </table>
    </div>

    <!-- Assign Modal -->
    <div class="modal fade" id="assignModal" tabindex="-1" aria-labelledby="assignModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignModalLabel">Assign Quiz</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" ></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="quizDeadline" style="margin-bottom: 1em">Select Deadline:</label>
                        <input type="date" id="quizDeadline" name="deadline" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="passingScore" class="form-label" style="margin-bottom: 1em; margin-top: 2em">Select Number of Questions to Pass</label>
                        <input type="number" class="form-control" id="passingScore" name="passingScore" min="1" max="" required>
                    </div>
                    <label for="assignForm" style="margin-top: 2em; margin-bottom: 1em">Select Staff Members:</label>
                    <form id="assignForm">
                        <!-- Dynamically populate this list with users -->
                        {%  if users is defined and users is not empty %}
                            {% for user in users %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="{{ user.id }}" id="user{{ user.id }}">
                                    <label class="form-check-label" for="user{{ user.id }}">
                                        {{ user.name }}
                                    </label>
                                </div>
                            {% endfor %}
                        {% else %}
                            <p>No users available</p>
                        {% endif %}
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="assignQuiz()">Assign</button>
                </div>
            </div>
        </div>
    </div>

    <div id="paginationControls" class="d-flex justify-content-center">
        <!-- Pagination controls will be dynamically inserted here by JavaScript -->
    </div>


{% endblock %}


{% block javascripts %}
    {{ parent() }}

    <script>


        document.addEventListener('DOMContentLoaded', function() {

            // Event listener for the quizList table
            document.getElementById('quizList').addEventListener('click', function(e) {
                // Check if the clicked element is an assign button
                if (e.target && e.target.getAttribute('data-bs-target') === '#assignModal') {
                    var totalQuestions = e.target.getAttribute('data-questions');
                    var passingScoreInput = document.getElementById('passingScore');

                    // Set the max attribute for passingScore input
                    if (passingScoreInput) {
                        passingScoreInput.setAttribute('max', totalQuestions);
                    }
                    var quizId = e.target.getAttribute('data-quiz-id');
                    var assignModal = document.getElementById('assignModal');

                    // Set the data-quiz-id attribute for the assignModal
                    if (assignModal) {
                        assignModal.setAttribute('data-quiz-id', quizId);
                    }
                }
            });

            // Function to fetch quizzes and update UI
            function fetchFilteredQuizzes(page = 1) { // Default to page 1
                const trainerFilter = document.getElementById('trainerFilter').value;
                const topicFilter = document.getElementById('topicFilter').value;
                const userFilter = document.getElementById('userFilter').value;
                const url = `/fetch-filtered-quizzes?trainer=${encodeURIComponent(trainerFilter)}&topic=${encodeURIComponent(topicFilter)}&user=${encodeURIComponent(userFilter)}&page=${page}`;

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        const { quizzes, pagination } = data;
                        const quizList = document.getElementById('quizList');
                        quizList.innerHTML = ''; // Clear the current list

                        if (!quizzes.length) {
                            quizList.innerHTML = '<tr><td colspan="5" style="text-align: center">No quizzes found.</td></tr>';
                        } else {
                            quizzes.forEach(quiz => {
                                const row = `
                        <tr>
                            <td style="text-align: center">${quiz.creationDate}</td>
                            <td style="text-align: center">${quiz.id}</td>
                            <td style="text-align: center">${quiz.type}</td>
                            <td style="text-align: center">${quiz.trainerName}</td>
                            <td style="text-align: center">
                                <a href="${quiz.detailsUrl}" class="btn btn-primary">Details</a>
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignModal" data-quiz-id="${quiz.id}" data-questions="${quiz.questionsLength}">Assign</button>
                                <a href="${quiz.historyUrl}" class="btn btn-primary">History</a>
                            </td>
                        </tr>
                        `;
                                quizList.insertAdjacentHTML('beforeend', row);
                            });
                        }
                        // Call function to update pagination controls
                        updatePaginationControls(pagination);
                    })
                    .catch(error => console.error('Failed to fetch quizzes:', error));
            }


            // Function to dynamically create and update pagination controls
            function updatePaginationControls(pagination) {
                const container = document.getElementById('paginationControls');
                container.innerHTML = '';

                if (pagination.currentPage > 1) {
                    const prevButton = document.createElement('button');
                    prevButton.textContent = 'Previous';
                    prevButton.className = 'btn btn-outline-secondary';
                    prevButton.addEventListener('click', () => fetchFilteredQuizzes(pagination.currentPage - 1));
                    container.appendChild(prevButton);
                }

                for (let page = 1; page <= pagination.totalPages; page++) {
                    const button = document.createElement('button');
                    button.textContent = page;
                    button.className = 'btn ' + (page === pagination.currentPage ? 'btn-primary' : 'btn-outline-secondary');
                    button.addEventListener('click', () => fetchFilteredQuizzes(page));
                    container.appendChild(button);
                }

                if (pagination.currentPage < pagination.totalPages) {
                    const nextButton = document.createElement('button');
                    nextButton.textContent = 'Next';
                    nextButton.className = 'btn btn-outline-secondary';
                    nextButton.addEventListener('click', () => fetchFilteredQuizzes(pagination.currentPage + 1));
                    container.appendChild(nextButton);
                }
            }




            // Event listeners for filter changes
            document.getElementById('trainerFilter').addEventListener('change', () => fetchFilteredQuizzes());
            document.getElementById('topicFilter').addEventListener('change', () => fetchFilteredQuizzes());
            document.getElementById('userFilter').addEventListener('change', () => fetchFilteredQuizzes());

            // Initial fetch
            fetchFilteredQuizzes();


            // Setting the minimum date for the quizDeadline input to today's date
            var deadlineInput = document.getElementById('quizDeadline');
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0
            var yyyy = today.getFullYear();
            today = yyyy + '-' + mm + '-' + dd;
            deadlineInput.setAttribute('min', today);

            // JavaScript to handle the form submission for assigning a quiz
            window.assignQuiz = function() {
                // validate the form: at least one user must be selected, passingScore must be set, and deadline must be set
                if (document.querySelectorAll('#assignForm .form-check-input:checked').length === 0) {
                    alert('Please select at least one user to assign the quiz to.');
                    return;
                }
                // Check if the passingScore and deadline inputs are empty
                if (document.getElementById('passingScore').value === '') {
                    alert('Please set the passing score.');
                    return;
                }
                if (document.getElementById('quizDeadline').value === '') {
                    alert('Please set the deadline.');
                    return;
                }

                // For each checked checkbox, add the value to the selectedUsers array
                const selectedUsers = [];
                document.querySelectorAll('#assignForm .form-check-input:checked').forEach(input => {
                    selectedUsers.push(input.value);
                });
                // Retrieve the quizId stored in the modal's attribute
                const quizId = document.getElementById('assignModal').getAttribute('data-quiz-id');
                // Retrieve the passingScore
                const passingScore = document.getElementById('passingScore').value;
                // Retrieve the deadline
                const deadline = document.getElementById('quizDeadline').value;

                // Prepare the data object with the correct structure
                const assignmentData = {
                    quizId: quizId,
                    userIds: selectedUsers,
                    passingScore: parseInt(passingScore),
                    deadline: deadline
                };

                // Send a POST request to the server
                fetch('/assign-quiz', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(assignmentData),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                        } else {
                            // If the quiz was assigned successfully display a success message
                            alert('Quiz assigned successfully.');
                            bootstrap.Modal.getInstance(document.getElementById('assignModal')).hide();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while assigning the quiz.');
                    })
                    .finally (() => {

                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.remove();
                        }
                    });
            };

        });

        // jQuery for handling the modal's hidden event
        $(document).ready(function() {
            $('#assignModal').on('hidden.bs.modal', function() {
                document.querySelectorAll('#assignForm .form-check-input:checked').forEach(input => {
                    input.checked = false;
                });
                document.getElementById('passingScore').value = '';
                document.getElementById('quizDeadline').value = '';
            });
        });

    </script>

{% endblock %}
